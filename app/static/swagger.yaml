swagger: '2.0'
info:
  version: "1.0.0"
  title: Ecommerce API
  description: A simple ecommerce API built with Flask and MySQL.
  contact:
    name: API Support
    url: "http://www.example.com/support"
    email: "support@example.com"
host: "localhost:5000"
basePath: "/"
schemes:
  - "http"

# Security Definitions
securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    description: "Enter 'Bearer' [space] and then your token in the text input below. Example: 'Bearer abcde12345'"

security:
  - Bearer: []

paths:
  /auth/register/admin:
    post:
      tags:
        - "Auth"
      summary: "Register a new admin"
      description: "Register a new admin user by providing a username, email, and password."
      parameters:
        - in: "body"
          name: "body"
          description: "Admin registration details"
          required: true
          schema:
            type: "object"
            required:
              - username
              - email
              - password
            properties:
              username:
                type: "string"
                description: "Username for the new admin"
              email:
                type: "string"
                description: "Email address of the new admin"
              password:
                type: "string"
                description: "Password for the new admin"
      responses:
        201:
          description: "Admin user created successfully"
        400:
          description: "Admin user already exists or invalid input"

  /auth/register/client:
    post:
      tags:
        - "Auth"
      summary: "Register a new client"
      description: "Register a new client user by providing a username, email, and password."
      parameters:
        - in: "body"
          name: "body"
          description: "Client registration details"
          required: true
          schema:
            type: "object"
            required:
              - username
              - email
              - password
            properties:
              username:
                type: "string"
                description: "Username for the new client"
              email:
                type: "string"
                description: "Email address of the new client"
              password:
                type: "string"
                description: "Password for the new client"
      responses:
        201:
          description: "Client user created successfully"
        400:
          description: "Client user already exists or invalid input"

  /auth/login/admin:
    post:
      tags:
        - "Auth"
      summary: "Login an admin"
      description: "Authenticate an admin user by providing email and password."
      parameters:
        - in: "body"
          name: "body"
          description: "Admin login details"
          required: true
          schema:
            type: "object"
            required:
              - email
              - password
            properties:
              email:
                type: "string"
                description: "Email address of the admin"
              password:
                type: "string"
                description: "Password of the admin"
      responses:
        200:
          description: "Admin logged in successfully"
        401:
          description: "Invalid credentials"

  /auth/login/client:
    post:
      tags:
        - "Auth"
      summary: "Login a client"
      description: "Authenticate a client user by providing email and password."
      parameters:
        - in: "body"
          name: "body"
          description: "Client login details"
          required: true
          schema:
            type: "object"
            required:
              - email
              - password
            properties:
              email:
                type: "string"
                description: "Email address of the client"
              password:
                type: "string"
                description: "Password of the client"
      responses:
        200:
          description: "Client logged in successfully"
        401:
          description: "Invalid credentials"

  /auth/delete/admin/{user_id}:
    delete:
      tags:
        - "Auth"
      summary: "Delete an admin user"
      description: "Allows an admin to delete another admin user by providing the user ID."
      parameters:
        - in: "path"
          name: "user_id"
          description: "ID of the admin user to delete"
          required: true
          type: "integer"
      security:
        - Bearer: []  # Require Bearer token for this endpoint
      responses:
        200:
          description: "Admin account deleted successfully"
        404:
          description: "User not found"
        403:
          description: "Access forbidden: Admins only"

  /auth/delete/client/{user_id}:
    delete:
      tags:
        - "Auth"
      summary: "Delete a client user"
      description: "Allows an admin to delete a client user by providing the user ID."
      parameters:
        - in: "path"
          name: "user_id"
          description: "ID of the client user to delete"
          required: true
          type: "integer"
      security:
        - Bearer: []  # Require Bearer token for this endpoint
      responses:
        200:
          description: "Client account deleted successfully"
        404:
          description: "User not found"
        403:
          description: "Access forbidden: Admins only"

  /auth/users/admin:
    get:
      tags:
        - "Auth"
      summary: "List all admin users"
      description: "Retrieve a list of all admin users."
      security:
        - Bearer: []  # Require Bearer token for this endpoint
      responses:
        200:
          description: "A list of admin users"
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                id:
                  type: "integer"
                  description: "ID of the admin user"
                username:
                  type: "string"
                  description: "Username of the admin user"
                email:
                  type: "string"
                  description: "Email address of the admin user"
        403:
          description: "Access forbidden: Admins only"

  /auth/users/client:
    get:
      tags:
        - "Auth"
      summary: "List all client users"
      description: "Retrieve a list of all client users."
      security:
        - Bearer: []  # Require Bearer token for this endpoint
      responses:
        200:
          description: "A list of client users"
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                id:
                  type: "integer"
                  description: "ID of the client user"
                username:
                  type: "string"
                  description: "Username of the client user"
                email:
                  type: "string"
                  description: "Email address of the client user"
        403:
          description: "Access forbidden: Admins only"
          
  /products/:
    get:
      tags:
        - "Product"
      summary: "Retrieve all products"
      description: "Get a list of all products in the inventory."
      security:
        - Bearer: []  # Require Bearer token for this endpoint
      responses:
        200:
          description: "A list of products"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
      x-role: "admin"  # Custom field to indicate this endpoint requires admin role

    post:
      tags:
        - "Product"
      summary: "Create a new product"
      description: "Add a new product to the inventory."
      parameters:
        - in: "body"
          name: "body"
          description: "Product details"
          required: true
          schema:
            $ref: "#/definitions/Product"
      security:
        - Bearer: []  # Require Bearer token for this endpoint
      responses:
        201:
          description: "Product created successfully"
        400:
          description: "Invalid input"
      x-role: "admin"  # Custom field to indicate this endpoint requires admin role

  /products/{product_id}:
    get:
      tags:
        - "Product"
      summary: "Get product details"
      description: "Retrieve details of a product by its ID."
      parameters:
        - in: "path"
          name: "product_id"
          description: "ID of the product to retrieve"
          required: true
          type: "integer"
      security:
        - Bearer: []  # Require Bearer token for this endpoint
      responses:
        200:
          description: "Product details"
          schema:
            $ref: "#/definitions/Product"
        404:
          description: "Product not found"
      x-role: "admin"  # Custom field to indicate this endpoint requires admin role

    put:
      tags:
        - "Product"
      summary: "Update a product"
      description: "Update details of an existing product by its ID."
      parameters:
        - in: "path"
          name: "product_id"
          description: "ID of the product to update"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Updated product details"
          required: true
          schema:
            $ref: "#/definitions/Product"
      security:
        - Bearer: []  # Require Bearer token for this endpoint
      responses:
        200:
          description: "Product updated successfully"
        404:
          description: "Product not found"
      x-role: "admin"  # Custom field to indicate this endpoint requires admin role

    delete:
      tags:
        - "Product"
      summary: "Delete a product"
      description: "Delete a product by its ID."
      parameters:
        - in: "path"
          name: "product_id"
          description: "ID of the product to delete"
          required: true
          type: "integer"
      security:
        - Bearer: []  # Require Bearer token for this endpoint
      responses:
        200:
          description: "Product deleted successfully"
        404:
          description: "Product not found"
      x-role: "admin"  # Custom field to indicate this endpoint requires admin role

  /orders/:
    get:
      tags:
        - "Order"
      summary: "Retrieve all orders"
      description: "Get a list of all orders placed by the authenticated user."
      security:
        - Bearer: []  # Require Bearer token for this endpoint
      responses:
        200:
          description: "A list of orders"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Order"
      x-role: "client"  # Custom field to indicate this endpoint requires client role

    post:
      tags:
        - "Order"
      summary: "Place a new order"
      description: "Place a new order for the authenticated user."
      parameters:
        - in: "body"
          name: "body"
          description: "Order details"
          required: true
          schema:
            type: "object"
            required:
              - products
            properties:
              products:
                type: "array"
                description: "List of products in the order"
                items:
                  type: "object"
                  required:
                    - product_id
                    - quantity
                  properties:
                    product_id:
                      type: "integer"
                      description: "ID of the product"
                    quantity:
                      type: "integer"
                      minimum: 1
                      description: "Quantity of the product ordered"
      security:
        - Bearer: []  # Require Bearer token for this endpoint
      responses:
        201:
          description: "Order created successfully"
        400:
          description: "Invalid input"
      x-role: "client"  # Custom field to indicate this endpoint requires client role

  /orders/{order_id}:
    get:
      tags:
        - "Order"
      summary: "Get order details"
      description: "Retrieve details of an order by its ID."
      parameters:
        - in: "path"
          name: "order_id"
          description: "ID of the order to retrieve"
          required: true
          type: "integer"
      security:
        - Bearer: []  # Require Bearer token for this endpoint
      responses:
        200:
          description: "Order details"
          schema:
            $ref: "#/definitions/Order"
        404:
          description: "Order not found"
      x-role: "client"  # Custom field to indicate this endpoint requires client role

    put:
      tags:
        - "Order"
      summary: "Update an order"
      description: "Update details of an existing order by its ID."
      parameters:
        - in: "path"
          name: "order_id"
          description: "ID of the order to update"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Updated order details"
          required: true
          schema:
            type: "object"
            properties:
              status:
                type: "string"
                description: "Updated status of the order"
      security:
        - Bearer: []  # Require Bearer token for this endpoint
      responses:
        200:
          description: "Order updated successfully"
        404:
          description: "Order not found"
      x-role: "client"  # Custom field to indicate this endpoint requires client role

    delete:
      tags:
        - "Order"
      summary: "Delete an order"
      description: "Delete an order by its ID."
      parameters:
        - in: "path"
          name: "order_id"
          description: "ID of the order to delete"
          required: true
          type: "integer"
      security:
        - Bearer: []  # Require Bearer token for this endpoint
      responses:
        200:
          description: "Order deleted successfully"
        404:
          description: "Order not found"
      x-role: "client"  # Custom field to indicate this endpoint requires client role

definitions:
  Product:
    type: "object"
    required:
      - name
      - price
    properties:
      id:
        type: "integer"
        description: "Unique identifier for the product"
      name:
        type: "string"
        description: "Name of the product"
      description:
        type: "string"
        description: "Detailed description of the product"
      price:
        type: "number"
        format: "float"
        description: "Price of the product"
      stock:
        type: "integer"
        description: "Number of items in stock"
      created_at:
        type: "string"
        format: "date-time"
        description: "Timestamp when the product was added to the inventory"

  Order:
    type: "object"
    required:
      - total_price
    properties:
      id:
        type: "integer"
        description: "Unique identifier for the order"
      user_id:
        type: "integer"
        description: "ID of the user who placed the order"
      total_price:
        type: "number"
        format: "float"
        description: "Total price of the order"
      created_at:
        type: "string"
        format: "date-time"
        description: "Timestamp when the order was placed"
      status:
        type: "string"
        description: "Current status of the order (e.g., pending, completed)"
      products:
        type: "array"
        description: "List of products in the order"
        items:
          $ref: "#/definitions/OrderProduct"

  OrderProduct:
    type: "object"
    required:
      - product_id
      - quantity
    properties:
      order_id:
        type: "integer"
        description: "ID of the order"
      product_id:
        type: "integer"
        description: "ID of the product"
      quantity:
        type: "integer"
        description: "Quantity of the product ordered"
      price_at_order:
        type: "number"
        format: "float"
        description: "Price of the product at the time the order was placed"
      product:
        $ref: "#/definitions/Product"
